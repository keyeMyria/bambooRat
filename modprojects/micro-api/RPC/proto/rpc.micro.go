// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Alice service

type AliceService interface {
	Sing(ctx context.Context, in *AliceRequest, opts ...client.CallOption) (*AliceResponse, error)
}

type aliceService struct {
	c    client.Client
	name string
}

func NewAliceService(name string, c client.Client) AliceService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "alice"
	}
	return &aliceService{
		c:    c,
		name: name,
	}
}

func (c *aliceService) Sing(ctx context.Context, in *AliceRequest, opts ...client.CallOption) (*AliceResponse, error) {
	req := c.c.NewRequest(c.name, "Alice.Sing", in)
	out := new(AliceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Alice service

type AliceHandler interface {
	Sing(context.Context, *AliceRequest, *AliceResponse) error
}

func RegisterAliceHandler(s server.Server, hdlr AliceHandler, opts ...server.HandlerOption) error {
	type alice interface {
		Sing(ctx context.Context, in *AliceRequest, out *AliceResponse) error
	}
	type Alice struct {
		alice
	}
	h := &aliceHandler{hdlr}
	return s.Handle(s.NewHandler(&Alice{h}, opts...))
}

type aliceHandler struct {
	AliceHandler
}

func (h *aliceHandler) Sing(ctx context.Context, in *AliceRequest, out *AliceResponse) error {
	return h.AliceHandler.Sing(ctx, in, out)
}

// Client API for Bob service

type BobService interface {
	Dance(ctx context.Context, in *BobRequest, opts ...client.CallOption) (*BobResponse, error)
}

type bobService struct {
	c    client.Client
	name string
}

func NewBobService(name string, c client.Client) BobService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "bob"
	}
	return &bobService{
		c:    c,
		name: name,
	}
}

func (c *bobService) Dance(ctx context.Context, in *BobRequest, opts ...client.CallOption) (*BobResponse, error) {
	req := c.c.NewRequest(c.name, "Bob.Dance", in)
	out := new(BobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bob service

type BobHandler interface {
	Dance(context.Context, *BobRequest, *BobResponse) error
}

func RegisterBobHandler(s server.Server, hdlr BobHandler, opts ...server.HandlerOption) error {
	type bob interface {
		Dance(ctx context.Context, in *BobRequest, out *BobResponse) error
	}
	type Bob struct {
		bob
	}
	h := &bobHandler{hdlr}
	return s.Handle(s.NewHandler(&Bob{h}, opts...))
}

type bobHandler struct {
	BobHandler
}

func (h *bobHandler) Dance(ctx context.Context, in *BobRequest, out *BobResponse) error {
	return h.BobHandler.Dance(ctx, in, out)
}
